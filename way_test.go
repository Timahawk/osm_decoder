package main

/*
func Test_decodeLineString(t *testing.T) {
	Setup()

	ls, ok := largeMapLineString.Get("403591129")
	if !ok {
		log.Fatal("Not in dict!")
	}
	encoder := wkt.NewEncoder()
	str, err := encoder.Encode(&ls.Coords)
	if err != nil {
		log.Fatal(err)
	}
	assert.Equal(t, str, "LINESTRING (1.7188917000000001 42.5537794, 1.7186894000000001 42.5540425, 1.7186303 42.554117600000005, 1.7185606000000002 42.5541926, 1.7185016000000002 42.5542638, 1.7184372 42.554330900000004, 1.7183943000000002 42.554410000000004, 1.7183460000000002 42.554489000000004, 1.7182924000000002 42.5545641, 1.7182334000000001 42.5546431, 1.7180027000000002 42.5549751, 1.7179544000000002 42.5550501, 1.7178847000000002 42.5551134, 1.7178257000000001 42.555180500000006, 1.7177667 42.5552517, 1.717713 42.5553267, 1.7176594 42.555401800000006, 1.7175843000000002 42.555473, 1.7175199 42.5555401, 1.7174341000000002 42.5556113, 1.7173429 42.555678400000005, 1.7172571 42.5557377, 1.7168923 42.556057800000005, 1.7168547 42.5560914, 1.7168118 42.556121000000005, 1.7167743000000002 42.5561546, 1.7167206000000002 42.556192100000004, 1.7166911 42.556225700000006, 1.7166482 42.556257300000006, 1.7164095000000001 42.5564589, 1.7163692000000002 42.556494400000005, 1.7163290000000002 42.55653, 1.7162807000000002 42.556563600000004, 1.7162378 42.556595200000004, 1.7161868 42.5566248, 1.7161413 42.556652500000006, 1.7160983 42.5566801, 1.7160501000000001 42.5567038, 1.7159991 42.5567335, 1.7159508 42.5567572, 1.7159052000000001 42.5567809, 1.7158462 42.5568046, 1.7157952 42.556826300000004, 1.7157416 42.5568441, 1.7156853 42.5568639, 1.7156289 42.556881700000005, 1.715578 42.5569014, 1.7155243 42.5569192, 1.7154734 42.5569469, 1.7154224 42.5569646, 1.7153661 42.5569805, 1.7153017000000002 42.557000200000004, 1.7152481000000002 42.557016000000004, 1.7151944000000001 42.557031800000004, 1.7151381 42.5570417, 1.7150791 42.557055500000004, 1.7150228 42.557063400000004, 1.7149664 42.557079200000004, 1.7149155 42.557101, 1.7146258 42.5572748, 1.7145856000000002 42.5573045, 1.7145480000000002 42.5573381, 1.7145105 42.557373600000005, 1.7144702 42.5574072, 1.7144380000000001 42.5574408, 1.7143978000000002 42.5574724, 1.7143522000000002 42.557498100000004, 1.7142959000000002 42.5575198, 1.7142396000000002 42.557539600000005, 1.7141913000000002 42.5575574, 1.7141403000000002 42.557579100000005, 1.7140947000000002 42.5576008, 1.7140411000000002 42.5576305, 1.7139928000000002 42.557658100000005, 1.7139472 42.5576838, 1.7139016 42.5577115, 1.7138641000000001 42.5577411, 1.7138265000000001 42.5577727, 1.7137782000000001 42.557800400000005, 1.7137219000000001 42.557832000000005, 1.7134832000000002 42.5579229, 1.7134081 42.557942600000004, 1.7133115 42.5579782, 1.7132659000000001 42.5580019, 1.7132150000000002 42.5580256, 1.7131640000000001 42.5580434, 1.7131104000000001 42.5580572, 1.7130487 42.5580651, 1.712987 42.558069100000004, 1.712928 42.558073, 1.7128663000000002 42.558071000000005, 1.7122547000000001 42.558013700000004, 1.7116781 42.557913, 1.7112677 42.557828, 1.7112114 42.5578122, 1.7111523000000002 42.5577964, 1.7110987000000002 42.557778600000006, 1.7110397000000002 42.557760900000005, 1.7109860000000001 42.5577431, 1.7109378000000002 42.5577174, 1.7109002000000002 42.5576858, 1.7108573 42.5576561, 1.7108037 42.5576403, 1.7107500000000002 42.5576285, 1.7106910000000002 42.5576226, 1.7106347000000002 42.557618600000005, 1.7105784000000002 42.5576127, 1.710522 42.5576048, 1.7104657 42.557594900000005, 1.7104094 42.5575811, 1.7103557 42.5575732, 1.7102994 42.5575672, 1.7102404000000002 42.5575672, 1.7101867000000002 42.5575692, 1.7099829000000002 42.5575337, 1.7099158 42.5575277, 1.7098488 42.557523800000006, 1.7097871 42.557523800000006, 1.7097254000000002 42.5575178, 1.7096691000000002 42.5575119, 1.7096128000000002 42.557500100000006, 1.7095564 42.5574862, 1.7095028 42.5574724, 1.7094438 42.557460600000006, 1.7093874 42.557450700000004, 1.7093177000000002 42.5574408, 1.7092533 42.557436800000005, 1.709189 42.5574309, 1.70913 42.557423, 1.7090709000000002 42.557413100000005, 1.7090200000000002 42.557389400000005, 1.7089690000000002 42.557365700000005, 1.7089207000000002 42.557342000000006, 1.7088617000000002 42.5573282, 1.7085318 42.5572827, 1.7084540000000001 42.557270900000006, 1.708395 42.557263000000006, 1.7083119000000002 42.557259, 1.7082368 42.557263000000006, 1.7081778 42.557270900000006, 1.7081214 42.5572808, 1.7080624000000002 42.5572906, 1.7080061000000002 42.557294600000006, 1.7079525000000002 42.557292600000004, 1.7078935000000002 42.557286700000006, 1.7078371 42.557286700000006, 1.7077754 42.557292600000004, 1.7077138 42.557300500000004, 1.7076521 42.5573124, 1.7075931000000002 42.5573203, 1.7075367000000001 42.557324200000004, 1.7074724000000001 42.5573321, 1.7074133 42.55734, 1.7073543000000002 42.5573539, 1.7072953000000002 42.557365700000005, 1.7072310000000002 42.5573855, 1.7071800000000001 42.5573993, 1.7071263 42.557411200000004, 1.7070673 42.557423, 1.7068581 42.5574724, 1.7067991 42.5574862, 1.7067321000000002 42.5574961, 1.7066731000000002 42.557504, 1.7066114000000001 42.557513900000004, 1.706555 42.5575198, 1.706496 42.5575277, 1.7064424 42.5575416, 1.7063861 42.557555400000005, 1.7063270000000001 42.5575672, 1.7062734000000002 42.5575751, 1.7062144000000001 42.5575811, 1.7061554 42.557583, 1.7060937 42.557585, 1.7058443 42.557523800000006, 1.7057852 42.5575178, 1.7057262000000002 42.5575178, 1.7056699000000002 42.5575277, 1.7056109000000002 42.5575356, 1.7055546000000001 42.5575435, 1.70523 42.5575989, 1.7051657 42.557602800000005, 1.7051120000000002 42.5576068, 1.7050503000000001 42.5576127, 1.7049913 42.5576206, 1.704935 42.557634400000005, 1.7048733 42.5576463, 1.7048223 42.5576621, 1.7047714 42.557681800000005, 1.7047231 42.557705500000004, 1.7046694 42.5577233, 1.7046131000000002 42.5577411, 1.7045568000000002 42.557751, 1.7045005000000002 42.5577589, 1.7044388000000001 42.557770700000006, 1.7043824 42.557778600000006, 1.7039426000000002 42.557855700000005, 1.7038862000000001 42.557863600000005, 1.7038299000000001 42.5578735, 1.7037709 42.5578774, 1.7037119 42.5578774, 1.7036556 42.5578735, 1.7035966 42.557871500000005, 1.7035349000000002 42.5578656, 1.7034759000000002 42.5578656, 1.7034195 42.5578695, 1.7033632 42.557879400000004, 1.7033042 42.5578913, 1.7032452 42.5579051, 1.7031781000000001 42.5579209, 1.7031164 42.557934700000004, 1.7030548 42.5579466, 1.7029957 42.5579624, 1.7029394000000002 42.557976200000006, 1.7028831000000002 42.557992000000006, 1.7028268000000002 42.5580098, 1.702639 42.558073, 1.7025854 42.5580908, 1.7025344 42.558108600000004, 1.7024727000000002 42.558124400000004, 1.7024083 42.5581382, 1.7023493 42.558148100000004, 1.7022957 42.558156000000004, 1.702242 42.5581619, 1.7021884 42.5581679, 1.7021321 42.558171800000004, 1.7020650000000002 42.5581758, 1.7020060000000001 42.5581758, 1.7019443 42.5581777, 1.7018826 42.558181700000006, 1.701829 42.5581837, 1.7017753000000002 42.5581916, 1.7017190000000002 42.5581995, 1.7016573000000002 42.5582153, 1.7016010000000001 42.5582311, 1.7015500000000001 42.5582489, 1.7015152 42.558284400000005, 1.7014991000000002 42.5583259, 1.7014937 42.558369400000004, 1.7014857 42.558410900000005, 1.7014696 42.5584524, 1.7014401000000001 42.558489900000005, 1.7014025000000002 42.5585195, 1.7013542000000001 42.558553100000005, 1.7013140000000002 42.5585907, 1.7011557000000002 42.5586993, 1.7010994000000002 42.5587151, 1.7010351000000001 42.558728900000006, 1.700917 42.5587487, 1.7008419000000001 42.558750700000004, 1.7007856000000001 42.558750700000004, 1.7007320000000001 42.5587448, 1.700673 42.5587369, 1.7005979 42.558725, 1.7005388000000001 42.558711200000005, 1.7004798 42.5586914, 1.7004316000000002 42.5586697, 1.7003860000000002 42.558647900000004, 1.7003377000000002 42.5586124, 1.7000185 42.558387200000006, 1.6999219 42.5583358, 1.6998522 42.558268600000005, 1.6998039 42.558197500000006, 1.6997664000000001 42.5581224, 1.6997288000000002 42.558047300000005, 1.6996966 42.557968300000006, 1.6996644 42.5578932, 1.6996323000000002 42.5578142, 1.6995947 42.5577352, 1.6995196000000001 42.557679900000004, 1.6994123 42.557668, 1.6992943 42.557668, 1.6991709000000002 42.5576996, 1.6990529 42.5577273, 1.6989456 42.557754900000006, 1.6988276000000002 42.557794400000006, 1.6987310000000002 42.5578419, 1.6986398 42.5578893, 1.6985540000000001 42.557952500000006, 1.6984789 42.558015700000006, 1.6984145000000002 42.5580829, 1.6983394 42.558142200000006, 1.6982429 42.5582014, 1.6981570000000001 42.5582568, 1.6980819 42.558316000000005, 1.6976823 42.5585195, 1.6976152000000002 42.558545200000005, 1.6974919000000002 42.558584700000004, 1.6974221 42.5586124, 1.6973685 42.558640000000004, 1.6973202 42.558663800000005, 1.6972746 42.5586914, 1.697237 42.558721000000006, 1.6972075000000002 42.5587566, 1.6971914000000001 42.558798100000004, 1.6971888000000002 42.558837600000004, 1.6972129 42.5588751, 1.6972531000000002 42.558902800000006, 1.6973041000000002 42.5589226, 1.6973604000000002 42.5589305, 1.6974141 42.5589443, 1.6974597 42.558968, 1.6975026000000002 42.5589937, 1.6975482000000002 42.559019400000004, 1.6975938000000002 42.559043100000004, 1.6976474000000001 42.559060900000006, 1.6976957000000001 42.559076700000006, 1.6977440000000001 42.5590984, 1.6982053000000001 42.5593967, 1.6982429 42.5594283, 1.6982831 42.559456000000004, 1.698326 42.5594856, 1.6983743 42.559511300000004, 1.6985808 42.5597069, 1.6986050000000001 42.5597444, 1.6986184000000002 42.5597879, 1.6986211 42.5598314, 1.6986130000000002 42.5598748, 1.6985808 42.5599124, 1.6985299 42.559932100000005, 1.6984709 42.559946000000004, 1.6984118000000001 42.5599519, 1.6983528 42.559955800000004, 1.6982965 42.5599578, 1.6982375 42.5599578, 1.6981731000000002 42.559944, 1.6981222 42.5599203, 1.6980766 42.559892600000005, 1.6980363 42.559861000000005, 1.6979907 42.5598353, 1.6979478000000001 42.5598037, 1.6979022000000001 42.55978, 1.6978432 42.5597701, 1.6977869 42.559782000000006, 1.6977681 42.559821500000005, 1.6977493000000001 42.559861000000005, 1.6977225 42.5598966, 1.6976206 42.5600072, 1.6975938000000002 42.560042800000005, 1.6975696 42.5600803, 1.6975589000000002 42.5601198, 1.6975643 42.560161300000004)")
}

func Test_decodePolygon(t *testing.T) {
	Setup()

	poly, ok := largeMapPolygon.Get("210581679")
	if !ok {
		log.Fatal("Not in dict!")
	}
	encoder := wkt.NewEncoder()
	str, err := encoder.Encode(&poly.Coords)
	if err != nil {
		log.Fatal(err)
	}
	assert.Equal(t, str, "POLYGON ((1.7184647000000002 42.5536838, 1.7185245 42.5536673, 1.7184933 42.5536059, 1.718687 42.5535525, 1.7186362000000002 42.553452500000006, 1.7183827 42.553522400000006, 1.7184647000000002 42.5536838))")
}

func Test_LineString_SQLString(t *testing.T) {
	Setup()
	ls, ok := largeMapLineString.Get("381208893")
	if !ok {
		log.Fatal("Not in dict!")
	}
	assert.Equal(t, ls.SQLString(), "(381208893, ('\"highway\"=>\"track\"'), ST_GeomFromText('LINESTRING (1.6789163 42.564626600000004, 1.6789039000000001 42.5649476, 1.6788998000000002 42.565377500000004, 1.6788978 42.5656076, 1.6788875 42.5656485, 1.6788505 42.5659104, 1.6787806 42.566196600000005, 1.6786634 42.5663586, 1.6786326 42.566394900000006, 1.6785976 42.566431200000004, 1.6785606000000002 42.5664646, 1.6785236000000001 42.5665039, 1.6784815000000002 42.5665494, 1.6784044 42.566632600000005, 1.6783983 42.5666735, 1.6783962000000001 42.566721900000005, 1.6783962000000001 42.5667628, 1.6784024000000002 42.5668067, 1.6784106 42.5668476, 1.6784229000000002 42.56689, 1.6784353 42.566929300000005, 1.6784373000000001 42.5669747)'))")
}

func Test_Polygon_SQLString(t *testing.T) {
	Setup()
	poly, ok := largeMapPolygon.Get("652039684")
	if !ok {
		log.Fatal("Not in dict!")
	}
	assert.Equal(t, poly.SQLString(), "(652039684, ('\"building\"=>\"yes\"'), ST_GeomFromText('POLYGON ((1.5597917000000001 42.5105717, 1.5599388 42.5105371, 1.559889 42.5104217, 1.5597419000000001 42.5104562, 1.5597917000000001 42.5105717))'))")
}
*/
